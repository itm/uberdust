# --------------------------------------------------------
OUTPUT = out/isense
OUTHEX = out
LOCAL_COMMON_FLAGS =
LIBFILE =

ifeq ($(JENNIC_CHIP),JN5139R1)
	 TOOLCHAIN = $(JENNIC_TOOLCHAIN_JN5139)

    ISENSE_HARDWARE_TYPE=ISENSE_JENNIC_JN513xR1
	 # ISENSE_PATH must be set outside (e.g., in Makefile.local)
	 JENNIC_SDK_PATH = $(ISENSE_PATH)/lib/jennic/1v4
	 BASE_DIR=$(JENNIC_SDK_PATH)
	 include $(ISENSE_PATH)/Makefile.properties

	 JENNIC_PCB=DEVKIT2
	 #This is used by config.mk
	 BASE_DIR=$(JENNIC_SDK_PATH)
	 include $(JENNIC_SDK_PATH)/Common/Build/config.mk

	 JENNIC_COMMON_INCLUDE_PATH  = $(JENNIC_SDK_PATH)/Common/Include
	 JENNIC_CHIP_INCLUDE_PATH    = $(CHIP_BASE)/Include
	 JENNIC_CHIP_LIBRARY         = $(CHIP_BASE)/Library/ChipLib.a
	 JENNIC_PLATFORM_INCLUDE_PATH= $(BOARDAPI_PLATFORM_PUB)
	 JENNIC_PLATFORM_LIBRARY     = $(BOARDAPI_BASE)/Library/BoardLib_$(JENNIC_CHIP_FAMILY).a

	 LOCAL_COMMON_FLAGS += -I$(JENNIC_COMMON_INCLUDE_PATH)
	 LOCAL_COMMON_FLAGS += -I$(JENNIC_CHIP_INCLUDE_PATH)
	 LOCAL_COMMON_FLAGS += -I$(JENNIC_PLATFORM_INCLUDE_PATH)
	 LOCAL_COMMON_FLAGS += -I$(BOARDAPI_COMMON_PUB)

	 LIBFILE += $(ISENSE_PATH)/lib/jennic/ba-elf-float-double-moddiv.a
else
ifeq ($(JENNIC_CHIP),JN5148)
	 TOOLCHAIN = $(JENNIC_TOOLCHAIN_JN5148)

	 # ISENSE_PATH must be set outside (e.g., in Makefile.local)
	 JENNIC_SDK_PATH = $(ISENSE_PATH)/lib/jennic/5148_1v2
	 BASE_DIR=$(JENNIC_SDK_PATH)
    include $(JENNIC_SDK_PATH)/Makefile.properties.JN5148.mk

	 #This is used by config.mk
	 BASE_DIR=$(JENNIC_SDK_PATH)
	 include $(JENNIC_SDK_PATH)/Chip/Common/Build/config.mk

	 LIBFILE += $(JENNIC_TOOLCHAIN_JN5148)/../lib/gcc/ba-elf/4.1.2/ba2/libgcc.a
else
    $(error Unknown Jennic chip variant specified)
endif
endif

TARGET = iSenseLibrary$(JENNIC_CHIP)
OBJS_PATH = bin/$(JENNIC_CHIP)

LOCAL_COMMON_FLAGS += -I$(ISENSE_PATH)/src
LOCAL_COMMON_FLAGS += -I$(WISELIB_PATH_TESTING) -I$(WISELIB_PATH)
LOCAL_COMMON_FLAGS += -DISENSE_JENNIC
LOCAL_COMMON_FLAGS += -D$(ISENSE_HARDWARE_TYPE)
LOCAL_COMMON_FLAGS += -DNDEBUG -DOSMODEL=iSenseOsModel -DISENSE
LOCAL_COMMON_FLAGS += -Os -finline-limit=40
#this was introduced later
LOCAL_COMMON_FLAGS += -fno-strength-reduce -pipe -fno-builtin -nostdlib

LOCAL_CFLAGS = -Wstrict-prototypes -Werror-implicit-function-declaration
LOCAL_CPPFLAGS = -g -DCHIP_RELEASE_3 -fno-exceptions -fconserve-space -fno-implicit-inline-templates -fno-rtti

CFLAGS   += $(LOCAL_COMMON_FLAGS) $(LOCAL_CFLAGS)
CPPFLAGS += $(LOCAL_COMMON_FLAGS) $(LOCAL_CPPFLAGS)

ifeq ($(JENNIC_CHIP),JN5139R1)
	  LDFLAGS += -T$(CHIP_BASE)/Build/$(LINKER_FILE) -Map $(OUTPUT)/Map.txt --gc-sections -z muldefs -u _AppWarmStart -u _AppColdStart
else
ifeq ($(JENNIC_CHIP),JN5148)
	  LDFLAGS += -T$(SDK_BASE_DIR)/Chip/$(JENNIC_CHIP)/Build/$(LINKCMD) -Map $(OUTPUT)/Map.txt --gc-sections -z muldefs -u _AppWarmStart -u _AppColdStart
endif
endif

LIBFILE += $(JENNIC_CHIP_LIBRARY)
LIBFILE += $(JENNIC_PLATFORM_LIBRARY)
LIBFILE += $(ISENSE_PATH)/lib/jennic/iSenseLibrary$(JENNIC_CHIP).a

isense:
	@mkdir -p $(OUTPUT)
	@echo "compiling..."
	$(TOOLCHAIN)ba-elf-g++ $(CPPFLAGS) -MMD -c $(WISELIB_PATH)/external_interface/isense/isense_os_standalone.cpp -o $(OUTPUT)/isense_os_standalone.o
	$(TOOLCHAIN)ba-elf-g++ $(CPPFLAGS) -MMD -c ./$(APP_SRC) -o $(OUTPUT)/$(BIN_OUT).o
	@echo "linking..."
	$(TOOLCHAIN)ba-elf-ld  $(LDFLAGS) -o $(OUTPUT)/$(BIN_OUT).elf  \
		$(OUTPUT)/isense_os_standalone.o $(OUTPUT)/$(BIN_OUT).o $(LIBFILE)

	@echo "make hex..."
	$(TOOLCHAIN)ba-elf-objcopy -O ihex $(OUTPUT)/$(BIN_OUT).elf $(OUTPUT)/$(BIN_OUT).hex
	$(TOOLCHAIN)ba-elf-objcopy -O binary $(OUTPUT)/$(BIN_OUT).elf $(OUTPUT)/$(BIN_OUT).bin
	@cp $(OUTPUT)/$(BIN_OUT).hex $(OUTHEX)/
	@cp $(OUTPUT)/$(BIN_OUT).bin $(OUTHEX)/
	@echo "show sizes..."
	$(TOOLCHAIN)ba-elf-size $(OUTPUT)/$(BIN_OUT).elf
